{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "<font size=\"+3\"><strong>Data Wrangling with Mongodb</strong></font>"
      ],
      "metadata": {
        "id": "9pMtGXyTSSgo"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "s0l_nOAUUHpp"
      },
      "outputs": [],
      "source": [
        "from pprint import PrettyPrinter\n",
        "import pandas as pd\n",
        "from pymongo import MongoClient"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Instantiate a PrettyPrinter\n",
        "pp = PrettyPrinter (indent= 2)"
      ],
      "metadata": {
        "id": "wTsLErbJUUlG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Prepare Data"
      ],
      "metadata": {
        "id": "aQeXj1b2ZVY0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Connect"
      ],
      "metadata": {
        "id": "YUvRiSYyZXTA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a client that connects to the database\n",
        "client = MongoClient(host=\"localhost\", port=27017)"
      ],
      "metadata": {
        "id": "g8NCnUORUiA9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Explore"
      ],
      "metadata": {
        "id": "lO7PC1PtZb5k"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# List of the available databases\n",
        "pp.pprint(list(client.list_databases()))"
      ],
      "metadata": {
        "id": "PkiTDBTBUqZs",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f74b115b-80e1-4f26-944b-8e7a66bc64b8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ {'empty': False, 'name': 'Air-Quality', 'sizeOnDisk': 33390592},\n",
            "  {'empty': False, 'name': 'sample_airbnb', 'sizeOnDisk': 55078912},\n",
            "  {'empty': False, 'name': 'sample_analytics', 'sizeOnDisk': 9572352},\n",
            "  {'empty': False, 'name': 'sample_geospatial', 'sizeOnDisk': 1404928},\n",
            "  {'empty': False, 'name': 'sample_restaurants', 'sizeOnDisk': 8994816},\n",
            "  {'empty': False, 'name': 'sample_weatherdata', 'sizeOnDisk': 2875392},\n",
            "  {'empty': False, 'name': 'admin', 'sizeOnDisk': 344064},\n",
            "  {'empty': False, 'name': 'local', 'sizeOnDisk': 24330530816}]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Assign the `air-quality` database to the variable db\n",
        "db = client[\"Air-Quality\"]"
      ],
      "metadata": {
        "id": "uROnX8CLU0zz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# List of the collections available in `db`\n",
        "for c in db.list_collections():\n",
        "    print(c[\"name\"])"
      ],
      "metadata": {
        "id": "1MynDaXEU-z1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7aad7d8e-84f2-4349-f675-89d2243f0901"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "beijing\n",
            "lagos\n",
            "mumbai\n",
            "Delhi\n",
            "dar-es-salaam\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Assign the `beijing` collection in db to the variable name beijing\n",
        "dar = db[\"dar-es-salaam\"]"
      ],
      "metadata": {
        "id": "YyCWlNKBVJ2d"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# How many documents are in the `beijing` collection\n",
        "dar.count_documents({})"
      ],
      "metadata": {
        "id": "J2pc56bYVQVJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b9019200-1bd3-4501-9a15-5e6e617b2920"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "198432"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Retrieve one document from the `beijing` collection\n",
        "result = dar.find_one({})\n",
        "pp.pprint(result)"
      ],
      "metadata": {
        "id": "zmEMd1o5VYcM",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e274c0e9-9dc2-4d8d-d8c6-888ddbfea5de"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{ 'P2': 9.7,\n",
            "  '_id': ObjectId('64f4f93a0102c916ca75eb72'),\n",
            "  'metadata': { 'lat': -6.818,\n",
            "                'lon': 39.285,\n",
            "                'measurement': 'P2',\n",
            "                'sensor_id': 29,\n",
            "                'sensor_type': 'SDS011',\n",
            "                'site': 11},\n",
            "  'timestamp': datetime.datetime(2018, 1, 1, 0, 5, 3, 874000)}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# How many sensor sites are included in the `beijing` collection\n",
        "dar.distinct(\"metadata.site\")"
      ],
      "metadata": {
        "id": "AyDCCAu-VfJV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "da55a666-86e3-4b4a-92f9-82641b14ae5e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[11, 23]"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# How many readings there are for each site in the `beijing` collection\n",
        "print(\"Documents from 11 Site:\", dar.count_documents({\"metadata.site\":11}))\n",
        "print(\"Documents from 23 Site:\", dar.count_documents({\"metadata.site\": 23}))"
      ],
      "metadata": {
        "id": "Kzo18lzuWBzN",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3381c5dc-b4c1-4f00-bca0-48c4c0833235"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Documents from 11 Site: 138412\n",
            "Documents from 23 Site: 60020\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# How many readings there are for each site in the `beijing` collection\n",
        "result = dar.aggregate(\n",
        "       [\n",
        "           {\"$group\":{\"_id\": \"$metadata.site\",\"count\":{\"$count\":{}}}}\n",
        "       ]\n",
        ")\n",
        "pp.pprint(list(result))"
      ],
      "metadata": {
        "id": "IUDPrhJPWJSV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d158daaf-d3e5-498e-847d-bff8a67ed471"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[{'_id': 23, 'count': 60020}, {'_id': 11, 'count': 138412}]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# How many types of measurements have been taken in the `beijing` collection\n",
        "dar.distinct(\"metadata.measurement\")"
      ],
      "metadata": {
        "id": "UhKsSNg9WTQw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bc0054de-3a00-485f-b6fe-6a649b4e6f20"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['P1', 'P2', 'humidity', 'temperature']"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Retrieve the PM 2.5 readings from all sites, limit 3\n",
        "result = dar.find({\"metadata.measurement\": \"P2\"}). limit (3)\n",
        "pp.pprint(list(result))"
      ],
      "metadata": {
        "id": "Fl_HjgRiWZ9S",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3e207c42-6989-42ab-c74b-93c86742b143"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ { 'P2': 9.7,\n",
            "    '_id': ObjectId('64f4f93a0102c916ca75eb72'),\n",
            "    'metadata': { 'lat': -6.818,\n",
            "                  'lon': 39.285,\n",
            "                  'measurement': 'P2',\n",
            "                  'sensor_id': 29,\n",
            "                  'sensor_type': 'SDS011',\n",
            "                  'site': 11},\n",
            "    'timestamp': datetime.datetime(2018, 1, 1, 0, 5, 3, 874000)},\n",
            "  { 'P2': 8.97,\n",
            "    '_id': ObjectId('64f4f93a0102c916ca75eba4'),\n",
            "    'metadata': { 'lat': -6.818,\n",
            "                  'lon': 39.285,\n",
            "                  'measurement': 'P2',\n",
            "                  'sensor_id': 29,\n",
            "                  'sensor_type': 'SDS011',\n",
            "                  'site': 11},\n",
            "    'timestamp': datetime.datetime(2018, 1, 1, 2, 9, 53, 933000)},\n",
            "  { 'P2': 9.37,\n",
            "    '_id': ObjectId('64f4f93a0102c916ca75eb8d'),\n",
            "    'metadata': { 'lat': -6.818,\n",
            "                  'lon': 39.285,\n",
            "                  'measurement': 'P2',\n",
            "                  'sensor_id': 29,\n",
            "                  'sensor_type': 'SDS011',\n",
            "                  'site': 11},\n",
            "    'timestamp': datetime.datetime(2018, 1, 1, 1, 12, 29, 94000)}]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate how many readings there are for each measurements in site 11\n",
        "result = dar.aggregate(\n",
        "      [\n",
        "          {\"$match\":{\"metadata.site\":11}},\n",
        "          {\"$group\":{\"_id\": \"$metadata.measurement\",\"count\":{\"$count\":{}}}}\n",
        "      ]\n",
        ")\n",
        "pp.pprint(list(result))"
      ],
      "metadata": {
        "id": "BlgbpsZeWibf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "702305eb-48be-479e-a38f-53b132160609"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ {'_id': 'humidity', 'count': 17283},\n",
            "  {'_id': 'temperature', 'count': 17283},\n",
            "  {'_id': 'P1', 'count': 51923},\n",
            "  {'_id': 'P2', 'count': 51923}]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate how many readings there are for each measurements in site 23\n",
        "result = dar.aggregate(\n",
        "     [\n",
        "          {\"$match\":{\"metadata.site\":23}},\n",
        "          {\"$group\":{\"_id\": \"$metadata.measurement\",\"count\":{\"$count\":{}}}}\n",
        "     ]\n",
        ")\n",
        "pp.pprint(list(result))"
      ],
      "metadata": {
        "id": "k2g2PgDrWvQ5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "537b368e-205e-4cbf-9fd3-9c9d0d4e7ec9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ {'_id': 'temperature', 'count': 15006},\n",
            "  {'_id': 'P2', 'count': 15004},\n",
            "  {'_id': 'humidity', 'count': 15006},\n",
            "  {'_id': 'P1', 'count': 15004}]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Import"
      ],
      "metadata": {
        "id": "Wy9JsWPGZk1G"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Retrieve the `PM 2.5` readings from site 11\n",
        "result = dar.find(\n",
        "       {\"metadata.site\":11,\"metadata.measurement\":\"P2\"},\n",
        "       projection= {\"P2\":1,\"timestamp\":1,\"_id\":0}\n",
        ")\n",
        "pp.pprint(result.next())"
      ],
      "metadata": {
        "id": "fpiToeosW6oT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9c0a3b16-8212-47bf-ff71-8352917cf338"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'P2': 9.7, 'timestamp': datetime.datetime(2018, 1, 1, 0, 5, 3, 874000)}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Read records from result into the DataFrame `df`\n",
        "df = pd.DataFrame(result).set_index(\"timestamp\")\n",
        "df.head()"
      ],
      "metadata": {
        "id": "Ip6p1C7CXGpZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "outputId": "77ed40c6-4cc4-4227-b421-b5b118f37c6b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                           P2\n",
              "timestamp                    \n",
              "2018-01-01 02:09:53.933  8.97\n",
              "2018-01-01 01:12:29.094  9.37\n",
              "2018-01-01 02:29:51.379  9.50\n",
              "2018-01-01 02:57:24.358  7.87\n",
              "2018-01-01 03:07:24.230  9.60"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-54a04a8f-7f89-4bd0-86ce-f75d64bbf4b1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>P2</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>timestamp</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2018-01-01 02:09:53.933</th>\n",
              "      <td>8.97</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-01 01:12:29.094</th>\n",
              "      <td>9.37</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-01 02:29:51.379</th>\n",
              "      <td>9.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-01 02:57:24.358</th>\n",
              "      <td>7.87</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-01 03:07:24.230</th>\n",
              "      <td>9.60</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-54a04a8f-7f89-4bd0-86ce-f75d64bbf4b1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-54a04a8f-7f89-4bd0-86ce-f75d64bbf4b1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-54a04a8f-7f89-4bd0-86ce-f75d64bbf4b1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7cc36121-bd21-4920-b951-d405643ee4a0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7cc36121-bd21-4920-b951-d405643ee4a0')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7cc36121-bd21-4920-b951-d405643ee4a0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    }
  ]
}